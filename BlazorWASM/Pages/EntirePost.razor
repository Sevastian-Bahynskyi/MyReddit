@page "/EntirePost/{postId:int}"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Security.Claims
@using Domain.Models.Votes
@inject IPostService postService
@inject ICommentService commentService
@using BlazorWASM.Pages.Components
@using Radzen
@inject NotificationService notificationService
@attribute [Authorize]
        

<div class="content d-flex justify-content-center">
    @if (post is null)
    {
        <label>Loading...</label>
    }
    else
    {
        <div class="entire-post-container">
            <div class="post-card card">
                <div class="post-top-row d-flex flex-row">
                    <p>@post.Owner.Username</p>
                </div>
                <h1>@post.Title</h1>
                <p>@post.Description</p>
                <ContentActionRow 
                    CommentCount="@post.CountAllComments()"
                    VotesUp="@postVoteUps"
                    CurrentVote="currentVote"
                    OnToggleComments="@(() => isShowingComments = !isShowingComments)"
                    OnVoteUp="VoteUp"
                    OnVoteDown="VoteDown"/>
            </div>
            @if (isShowingComments)
            {
                <textarea class="mt-4" @bind="@newCommentBody" @oninput="@(args => newCommentBody = args.Value?.ToString())"></textarea>
                <div class="d-flex justify-content-end mt-3">
                    <button @onclick="AddCommentAsync" class="new-comment-button primary-button">
                        <span class="oi oi-plus"></span>
                        Add a comment
                    </button>
                </div>
                
                <div class="comments-box">
                    @foreach (var comment in post.Comments.OrderByDescending(c => c.CreatedAt))
                    {
                        <CommentBox UserEmail="@userEmail" Comment="comment" Post="post"/>
                    }
                </div>
            }
        </div>
    }
</div>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    [Parameter] public int PostId { get; set; }
    private Post? post;
    
    private string newCommentBody;

    private string userEmail;
    private int postVoteUps;
    private VoteAction? currentVote;
    private bool isShowingComments;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal claims = authState.User;
        userEmail = claims.Claims.FirstOrDefault(c => c.Type.Equals("Email"))!.Value;
        post = await postService.GetByIdAsync(PostId);
        UpdatePostVoteUps();
        UpdateCurrentVote();
    }

    private void UpdatePostVoteUps()
    {
        postVoteUps = post!.Votes.PositiveVotesNumber;
    }
    private void UpdateCurrentVote()
    {
        currentVote = post!.Votes.UserCurrentVote(userEmail);
    }
    
    private void VoteUp()
    {
        Vote(VoteAction.VoteUp);
    }
    
    private void VoteDown()
    {
        Vote(VoteAction.VoteDown);
    }
    
    private async Task AddCommentAsync()
    {
        try
        {
            await commentService.CreateAsync(new CommentCreationDto()
            {
                CommentBody = newCommentBody,
                OwnerEmail = userEmail,
                PostId = post!.Id
            });
            
            post = await postService.GetByIdAsync(post.Id);
            newCommentBody = "";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            notificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Duration = 6000,
                Detail = e.Message
            });
        }
    }

    private async void Vote(VoteAction voteAction)
    {
        try
        {
            PostUpdateDto updateDto = new PostUpdateDto(post!.Id)
            {
                VoteAction = new ContentVote { OwnerEmail = userEmail, Vote = voteAction }
            };
            post = await postService.UpdateAsync(updateDto);
            UpdatePostVoteUps();
            UpdateCurrentVote();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            notificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Duration = 6000,
                Detail = e.Message
            });
        }
    }
}