@page "/EntirePost/{postId:int}"
@using Domain.Models
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Security.Claims
@using Domain.Models.Votes
@inject IPostService postService
@inject ICommentService commentService
@using BlazorWASM.Pages.Components
@using Radzen
@inject NotificationService notificationService
@attribute [Authorize]
        

<div class="content d-flex justify-content-center">
    @if (post is null)
    {
        <label>Loading...</label>
    }
    else
    {
        <div class="entire-post-container">
            <div class="post-card card">
                <div class="post-top-row d-flex flex-row">
                    <p>@post.Owner.Username</p>
                </div>
                <h1>@post.Title</h1>
                <p>@post.Description</p>
                <div class="post-bottom-row d-flex flex-row justify-content-start">
                    <div class="vote-area action-area d-flex flex-row align-items-center justify-content-between">
                        @{
                            string styleUpArrow = "";
                            string styleDownArrow = "";
                            if (currentVote == VoteAction.VoteUp)
                            {
                                styleUpArrow = "color: var(--up-arrow-color);";
                            }
                            else if(currentVote == VoteAction.VoteDown)
                            {
                                styleDownArrow = "color: var(--down-arrow-color);";
                            }
                            <button @onclick="VoteUp"><span style="@styleUpArrow" class="upvote oi oi-arrow-top"></span></button>
                            <span>@postVoteUps</span>
                            <button @onclick="VoteDown"><span style="@styleDownArrow" class="downvote oi oi-arrow-bottom"></span></button>
                        }
                    </div>
                    <div class="comment-area action-area px-2">
                        <button @onclick="@(() => isShowingComments = !isShowingComments)">
                            <span class="fa fa-comment"></span>
                            <span>@post.CountAllComments()</span>
                        </button>
                    </div>
                </div>
            </div>
            @if (isShowingComments)
            {
                <RadzenTextArea bind-Value="@newComment" Change=@(args => newComment = args)></RadzenTextArea>
                <button @onclick="AddCommentAsync" class="new-comment-button">
                    <span class="oi oi-plus"></span>
                    Add a comment
                </button>
                
                <div class="comments-box">
                    @foreach (var comment in post.Comments)
                    {
                        <CommentBox UserEmail="@userEmail" Comment="comment"/>
                    }
                </div>
            }
        </div>
    }
</div>


@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private string userEmail;
    private int postVoteUps;
    private string newComment;

    [Parameter] public int PostId { get; set; }
    private Post? post;
    private VoteAction? currentVote;

    private bool isShowingComments;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal claims = authState.User;
        userEmail = claims.Claims.FirstOrDefault(c => c.Type.Equals("Email"))!.Value;
        post = await postService.GetByIdAsync(PostId);
        UpdatePostVoteUps();
        UpdateCurrentVote();
    }

    private async Task AddCommentAsync()
    {
        try
        {
            newComment = "";
            await commentService.CreateAsync(new CommentCreationDto()
            {
                CommentBody = newComment,
                OwnerEmail = userEmail,
                PostId = post!.Id
            });
            
            post = await postService.GetByIdAsync(post.Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            notificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Duration = 6000,
                Detail = e.Message
            });
        }
    }

    

    private void UpdatePostVoteUps()
    {
        postVoteUps = post!.Votes.PositiveVotesNumber;
    }
    private void UpdateCurrentVote()
    {
        currentVote = post!.Votes.UserCurrentVote(userEmail);
    }
    
    private void VoteUp()
    {
        Vote(VoteAction.VoteUp);
    }
    
    private void VoteDown()
    {
        Vote(VoteAction.VoteDown);
    }

    private async void Vote(VoteAction voteAction)
    {
        try
        {
            PostUpdateDto updateDto = new PostUpdateDto(post!.Id)
            {
                VoteAction = new ContentVote { OwnerEmail = userEmail, Vote = voteAction }
            };
            post = await postService.UpdateAsync(updateDto);
            UpdatePostVoteUps();
            UpdateCurrentVote();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            notificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Duration = 6000,
                Detail = e.Message
            });
        }
    }
}