@using Domain.Models
@using BlazorWASM.Pages.Components
@using Domain.DTOs
@using Domain.Models.Votes
@using HttpClients.ClientInterfaces
@using Radzen
@namespace BlazorWASM.Pages.Components
@inject ICommentService commentService
@inject NotificationService notificationService
@inject IPostService postService

<div class="@Class">
    <p><a href="favicon.png">@Comment.Owner.Username</a></p>
    <p>@Comment.CommentBody</p>
    
    <ContentActionRow
        CommentCount="@Comment.CountAllComments()"
        CurrentVoteState="Comment.Votes.UserCurrentVote(UserEmail)"
        VotesNumber="Comment.Votes.VotesNumber"
        OnToggleComments="@(() => isShowingComments = !isShowingComments)"
        OnVoteUp="@(async () => await Vote(VoteAction.VoteUp))"
        OnVoteDown="@(async () => await Vote(VoteAction.VoteDown))"/>
    
    
    @if (isShowingComments)
    {
        <textarea class="mt-4" @bind="@commentBody"></textarea>
        <div class="d-flex justify-content-end mt-3">
            <button @onclick="@(async () => await AddCommentAsync())" class="new-comment-button primary-button">
                <span class="oi oi-plus"></span>
                Add a comment
            </button>
        </div>
        
        @foreach (var reply in Comment.Replies)
        {
            <CommentBox UserEmail="@UserEmail" Class="with-margin" Comment="@reply" Post="@Post"/>
        }
    }
    
</div>


@code {

    private string _class = "comment-box";
    [Parameter]
    public string Class {
        get => _class;
        set => _class = $"{_class} {value}";
    }
    [Parameter] public Comment Comment { get; set; }
    [Parameter] public Post Post { get; set; }
    [Parameter] public string UserEmail { get; set; }
    private bool isShowingComments;
    private string commentBody;
    


    private async Task AddCommentAsync()
    {
        try
        {
            await commentService.CreateAsync(new CommentCreationDto()
            {
                CommentBody = commentBody,
                OwnerEmail = UserEmail,
                PostId = Post.Id,
                CommentId = Comment.Id
            });

            Comment = await commentService.GetByIdAsync(Comment.Id);
            StateHasChanged();
            
            commentBody = "";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            notificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Duration = 6000,
                Detail = e.Message
            });
        }
    }
    

    private async Task Vote(VoteAction voteAction)
    {
        try
        {
            CommentUpdateDto updateDto = new CommentUpdateDto(Comment.Id)
            {
                VoteAction = new ContentVote { OwnerEmail = UserEmail, Vote = voteAction }
            };
            await commentService.UpdateAsync(updateDto);
            Comment = await commentService.GetByIdAsync(Comment.Id);
            Post = await postService.GetByIdAsync(Post.Id);
            // StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            notificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Duration = 6000,
                Detail = e.Message
            });
        }
    }
}