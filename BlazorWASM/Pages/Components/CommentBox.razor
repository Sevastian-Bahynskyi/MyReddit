@using Domain.Models
@using BlazorWASM.Pages.Components
@using Domain.DTOs
@using Domain.Models.Votes
@using HttpClients.ClientInterfaces
@using Radzen
@namespace BlazorWASM.Pages.Components
@inject ICommentService commentService
@inject NotificationService notificationService

<div class="@Class">
    <p><a href="favicon.png">@Comment.Owner.Username</a></p>
    <p>@Comment.CommentBody</p>
    
    <ContentActionRow 
        CommentCount="@Comment.CountAllComments()"
        VotesUp="@commentVoteUps"
        CurrentVote="currentVote"
        OnToggleComments="@(() => isShowingComments = !isShowingComments)"
        OnVoteUp="VoteUp"
        OnVoteDown="VoteDown"/>
    
    @if (isShowingComments)
    {
        <textarea class="mt-4" @bind="@commentBody" @oninput="@(args => commentBody = args.Value?.ToString())"></textarea>
        <div class="d-flex justify-content-end mt-3">
            <button @onclick="AddCommentAsync" class="new-comment-button primary-button">
                <span class="oi oi-plus"></span>
                Add a comment
            </button>
        </div>
        
        @foreach (var reply in Comment.Replies)
        {
            <CommentBox UserEmail="@UserEmail" Class="with-margin" Comment="@reply" Post="@Post"/>
        }
    }
    
</div>


@code {

    private string _class = "comment-box";
    [Parameter]
    public string Class {
        get => _class;
        set => _class = $"{_class} {value}";
    }
    [Parameter] public Comment Comment { get; set; }
    [Parameter] public Post Post { get; set; }
    [Parameter] public string UserEmail { get; set; }
    private int commentVoteUps;
    private VoteAction? currentVote;
    private bool isShowingComments;
    private string commentBody;


    protected override void OnInitialized()
    {
        UpdateCommentVoteUps();
        UpdateCurrentVote();
    }

    private async Task AddCommentAsync()
    {
        try
        {
            await commentService.CreateAsync(new CommentCreationDto()
            {
                CommentBody = commentBody,
                OwnerEmail = UserEmail,
                PostId = Post.Id,
                CommentId = Comment.Id
            });

            
            commentBody = "";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            notificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Duration = 6000,
                Detail = e.Message
            });
        }
    }

    
    private void UpdateCommentVoteUps()
    {
        commentVoteUps = Comment.Votes.PositiveVotesNumber;
    }
    private void UpdateCurrentVote()
    {
        currentVote = Comment.Votes.UserCurrentVote(UserEmail);
    }
    
    private void VoteUp()
    {
        Vote(VoteAction.VoteUp);
    }
    
    private void VoteDown()
    {
        Vote(VoteAction.VoteDown);
    }

    private async void Vote(VoteAction voteAction)
    {
        try
        {
            CommentUpdateDto updateDto = new CommentUpdateDto(Comment.Id)
            {
                VoteAction = new ContentVote { OwnerEmail = UserEmail, Vote = voteAction }
            };
            Comment = await commentService.UpdateAsync(updateDto);
            UpdateCommentVoteUps();
            UpdateCurrentVote();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            notificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Duration = 6000,
                Detail = e.Message
            });
        }
    }

}