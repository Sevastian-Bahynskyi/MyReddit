@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Radzen
@inject IUserAuthService authService
@namespace BlazorWASM.Pages.Components
@inject NotificationService notificationService

<div class="card d-flex justify-content-center text-center">
    @if (!isLoginView)
    {
        <h5>Register</h5>
        <div class="field">
            <input type="text" @bind="username" placeholder="Username"/>
            <span class="focus-input"></span>
            <span class="symbol-input">
                <i class="fa fa-key" aria-hidden="true"></i>
            </span>
        </div>
    }
    else
    {
        <h5>Login</h5>
    }
    <div class="field">
        <input type="email" @bind="email" placeholder="Email"/>
        <span class="focus-input"></span>
        <span class="symbol-input">
            <i class="fa fa-envelope" aria-hidden="true"></i>
        </span>
    </div>
    <div class="field">
        <input type="password" @bind="password" placeholder="Password"/>
        <span class="focus-input"></span>
        <span class="symbol-input">
            <i class="fa fa-key" aria-hidden="true"></i>
        </span>
    </div>
    <div class="login-option d-flex justify-content-evenly  flex-row">
        @{
            string description;
            string action;
            if (isLoginView)
            {
                description = "Don't have an account?";
                action = "Create account";
            }
            else
            {
                description = "Already have an account?";
                action = "Login";
            }
            <p>@description</p>
            <a @onclick="() => isLoginView = !isLoginView">@action</a>
        }
    </div>
    <button class="login-button" @onclick="LoginAsync">@(isLoginView? "Login" : "Register")</button>
</div>

@code {
    private string? username;
    private string? email;
    private string? password;
    private bool isLoginView = true;


    private async Task LoginAsync()
    {
        try
        {
            HandleEmptyFields();
            if (isLoginView)
                await authService.LoginAsync(new UserLoginDto(email!, password!));
            else
                await authService.RegisterAsync(new UserRegistrationDto(email!, username!, password!));
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            notificationService.Notify(new NotificationMessage()
            {
                Severity = NotificationSeverity.Error,
                Duration = 6000,
                Detail = e.Message
            });
        }
    }

    private void HandleEmptyFields()
    {
        string msg = "";
        int emptyFieldsCounter = 0;
        if (string.IsNullOrEmpty(email))
        {
            msg += string.IsNullOrEmpty(msg) ? "Email" : ", email";
            emptyFieldsCounter++;
        }

        if (string.IsNullOrEmpty(password))
        {
            msg += string.IsNullOrEmpty(msg) ? "Password" : ", password";
            emptyFieldsCounter++;
        }

        if (string.IsNullOrEmpty(username) && !isLoginView)
        {
            msg += string.IsNullOrEmpty(msg) ? "Username" : ", username";
            emptyFieldsCounter++;
        }

        if (!string.IsNullOrEmpty(msg))
            throw new Exception(emptyFieldsCounter > 1 ? $"{msg} fields are empty." : $"{msg} field is empty.");
    }
}